import json
from pathlib import Path
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import ADMIN_IDS, send_if_no_region
from main import run_main
from utils.logger import notify_admin_of_error

USERS_FILE = Path("data/users.json")
REGIONS_FILE = Path("data/user_regions.json")
ALERTS_FILE = Path("data/last_alerts.json")

AVAILABLE_REGIONS = [
    "–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    "–ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    "–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
]

def load_users():
    return json.loads(USERS_FILE.read_text()) if USERS_FILE.exists() else []

def save_user(user_id: int):
    users = load_users()
    if user_id not in users:
        users.append(user_id)
        USERS_FILE.write_text(json.dumps(users))

def remove_user(user_id: int):
    users = load_users()
    if user_id in users:
        users.remove(user_id)
        USERS_FILE.write_text(json.dumps(users))

def load_user_regions():
    return json.loads(REGIONS_FILE.read_text()) if REGIONS_FILE.exists() else {}

def save_user_regions(data):
    REGIONS_FILE.write_text(json.dumps(data, ensure_ascii=False, indent=2))

def load_last_alerts():
    return json.loads(ALERTS_FILE.read_text()) if ALERTS_FILE.exists() else []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        save_user(user_id)
        user_regions = load_user_regions().get(str(user_id), [])
        regions_info = f"\nüìç –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: {', '.join(user_regions)}" if user_regions else ""

        text = (
            "–ü—Ä–∏–≤–µ—Ç!\n"
            "–Ø ‚Äî *—Ç–æ—Ä—Ñ—è–Ω–æ–π —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å* –∫–æ–º–∞–Ω–¥—ã –°–∏–º–∞—Ä–≥–ª.\n"
            "–ë—É–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Ç–µ—Ä–º–æ—Ç–æ—á–∫–∏ –≤ —Ç–æ—Ä—Ñ—è–Ω–∏–∫–∞—Ö –∏–ª–∏ —Ä—è–¥–æ–º —Å –Ω–∏–º–∏ "
            "–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ —Ä–µ–≥–∏–æ–Ω–∞—Ö.\n\n"
            "üì° –¢–æ—á–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ–∫–æ–ª–æ –ø–æ–ª—É–Ω–æ—á–∏,\n"
            "üì¨ –ü—Ä–∏—Ö–æ–¥—è—Ç –≤ 8 —É—Ç—Ä–∞.\n"
            "–í–º–µ—Å—Ç–µ —Å –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —Ä–µ–≥–∏–æ–Ω, ID —Ç–æ—Ä—Ñ—è–Ω–∏–∫–∞ –∏ —Å—Å—ã–ª–∫—É "
            "–Ω–∞ –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–∞—à–µ–π –±–∞–∑–µ.\n"
            f"{regions_info}"
        )

        keyboard = [
            [InlineKeyboardButton("üìç –í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω—ã", callback_data="region_open")],
            [InlineKeyboardButton("üó∫ –ú–æ–∏ —Ä–µ–≥–∏–æ–Ω—ã", callback_data="my_regions")],
            [InlineKeyboardButton("üî• –í—á–µ—Ä–∞—à–Ω–∏–µ —Ç–µ—Ä–º–æ—Ç–æ—á–∫–∏", callback_data="my_alerts")],
            [InlineKeyboardButton("‚Ñπ –ö–∞–∫ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="about")],
            [InlineKeyboardButton("üì¨ –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
            [InlineKeyboardButton("üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe")],
        ]

        msg = update.message or update.callback_query.message
        await msg.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        await notify_admin_of_error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}", context)

async def my_regions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        msg = update.callback_query.message
        user_id = update.effective_user.id
        user_regions = load_user_regions()
        selected = user_regions.get(str(user_id))

        if selected:
            text = "üìç *–í–∞—à–∏ —Ä–µ–≥–∏–æ–Ω—ã:*\n" + "\n".join(f"‚Ä¢ {r}" for r in selected)
        else:
            text = "üìç *–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω—ã.*\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º:\n" + \
                   "\n".join(f"‚Ä¢ {r}" for r in AVAILABLE_REGIONS)

        await msg.reply_text(text, parse_mode="Markdown")
    except Exception as e:
        await notify_admin_of_error(f"–û—à–∏–±–∫–∞ –≤ /my_regions: {e}", context)

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        msg = update.message or update.callback_query.message
        text = (
            "*–ö–∞–∫ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç*\n\n"
            "–ë–æ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ø–∞–¥–∞—é—Ç –ª–∏ —Ç–µ—Ä–º–æ—Ç–æ—á–∫–∏ –≤ –≥—Ä–∞–Ω–∏—Ü—ã –∫—Ä—É–ø–Ω—ã—Ö –∏ –≥–æ—Ä–∏–º—ã—Ö —Ç–æ—Ä—Ñ—è–Ω–∏–∫–æ–≤ "
            "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –†–æ—Å—Å–∏–∏: –í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è, –ò–≤–∞–Ω–æ–≤—Å–∫–∞—è, –ö–∞–ª—É–∂—Å–∫–∞—è, –ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è, –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, –†—è–∑–∞–Ω—Å–∫–∞—è, "
            "–°–º–æ–ª–µ–Ω—Å–∫–∞—è, –¢–≤–µ—Ä—Å–∫–∞—è, –Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è. –í—Å–µ–≥–æ –≤ –±–∞–∑–µ –æ–∫–æ–ª–æ 300 —Ç–æ—Ä—Ñ—è–Ω–∏–∫–æ–≤.\n\n"
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —Ç–µ—Ä–º–æ—Ç–æ—á–∫–∏ VIIRS, MODIS, Suomi NPP —Å —É—á—ë—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏.\n"
            "–î–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ 8 —É—Ç—Ä–∞.\n\n"
            "–ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —Ä–µ–≥–∏–æ–Ω, ID —Ç–æ—Ä—Ñ—è–Ω–∏–∫–∞ –∏ —Å—Å—ã–ª–∫—É. "
            "_–û–∫–æ–ª–æ 30% –ø–æ–∂–∞—Ä–æ–≤ –Ω–µ –∏–º–µ—é—Ç —Ç–µ—Ä–º–æ—Ç–æ—á–µ–∫._"
        )
        await msg.reply_text(text, parse_mode="Markdown")
    except Exception as e:
        await notify_admin_of_error(f"–û—à–∏–±–∫–∞ –≤ /about: {e}", context)

async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        msg = update.message or update.callback_query.message
        text = (
            "*–ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–æ–º–∞–Ω–¥—ã –°–∏–º–∞—Ä–≥–ª*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã—Ö –ª–µ—Å–Ω—ã—Ö –ø–æ–∂–∞—Ä–Ω—ã—Ö –°–∏–º–∞—Ä–≥–ª.\n"
            "üì¨ info@simargl-team.ru\n"
            "üí¨ Telegram: @simargl_team\n"
            "üåê –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: vk.com/simargl_team\n\n"
            "–•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–º? –ü–∏—à–∏—Ç–µ –Ω–∞–º!"
        )
        await msg.reply_text(text, parse_mode="Markdown")
    except Exception as e:
        await notify_admin_of_error(f"–û—à–∏–±–∫–∞ –≤ /contacts: {e}", context)

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        remove_user(user_id)
        regions = load_user_regions()
        if str(user_id) in regions:
            del regions[str(user_id)]
            save_user_regions(regions)
        msg = update.message or update.callback_query.message
        await msg.reply_text("‚ùé –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –í–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî /start")
    except Exception as e:
        await notify_admin_of_error(f"–û—à–∏–±–∫–∞ –≤ /unsubscribe: {e}", context)

async def regions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        current = load_user_regions().get(str(user_id), [])

        buttons = [
            [InlineKeyboardButton(f"{'‚úÖ' if r in current else '‚¨úÔ∏è'} {r}", callback_data=f"region_{i}")]
            for i, r in enumerate(AVAILABLE_REGIONS)
        ]
        buttons.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="region_save")])
        reply_markup = InlineKeyboardMarkup(buttons)

        if update.callback_query:
            try:
                await update.callback_query.message.delete()
            except:
                pass
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –≤–∞–º —Ä–µ–≥–∏–æ–Ω—ã. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–≥–∏–æ–Ω, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª.",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –≤–∞–º —Ä–µ–≥–∏–æ–Ω—ã. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–≥–∏–æ–Ω, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª.",
                reply_markup=reply_markup
            )
    except Exception as e:
        await notify_admin_of_error(f"–û—à–∏–±–∫–∞ –≤ /regions: {e}", context)

async def region_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        data = query.data

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
        if data == "region_open":
            full = load_user_regions()
            context.user_data["temp_regions"] = full.get(str(user_id), []).copy()
            return await regions(update, context)

        # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        temp = context.user_data.get("temp_regions", [])

        if data.startswith("region_") and data != "region_save":
            index = int(data.split("_")[1])
            region = AVAILABLE_REGIONS[index]
            if region in temp:
                temp.remove(region)
            else:
                temp.append(region)
            context.user_data["temp_regions"] = temp

            buttons = [
                [InlineKeyboardButton(f"{'‚úÖ' if r in temp else '‚¨úÔ∏è'} {r}", callback_data=f"region_{i}")]
                for i, r in enumerate(AVAILABLE_REGIONS)
            ]
            buttons.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="region_save")])
            await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(buttons))
            return

        elif data == "region_save":
            user_regions = load_user_regions()
            selected = context.user_data.get("temp_regions", [])
            user_regions[str(user_id)] = selected
            save_user_regions(user_regions)

            if selected:
                await query.edit_message_text(f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–µ—Ä–º–æ—Ç–æ—á–∫–∏ –∏–∑: {', '.join(selected)}")
            else:
                await query.edit_message_text("üì≠ –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.")

            await start(update, context)

    except Exception as e:
        await notify_admin_of_error(f"–û—à–∏–±–∫–∞ –≤ region_callback: {e}", context)

async def my_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        alerts = load_last_alerts()
        regions = load_user_regions().get(str(user_id), [])
        results = {}

        for a in alerts:
            if not regions or a["region"] in regions:
                results.setdefault(a["region"], []).append(a)

        if not results:
            msg = update.message or update.callback_query.message
            await msg.reply_text("üî• –í—á–µ—Ä–∞ —Ç–µ—Ä–º–æ—Ç–æ—á–µ–∫ –≤ –≤–∞—à–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö –Ω–µ –±—ã–ª–æ.")
            return

        for region, region_alerts in results.items():
            text = f"üìç *{region}* ‚Äî {len(region_alerts)} —Ç–æ—á–µ–∫\n"
            for a in region_alerts:
                text += f"- {a.get('date', '–Ω–µ—Ç –¥–∞—Ç—ã')} {a['lat']:.4f}, {a['lon']:.4f}\n"
            await update.effective_message.reply_text(text, parse_mode="Markdown")
    except Exception as e:
        await notify_admin_of_error(f"–û—à–∏–±–∫–∞ –≤ /my_alerts: {e}", context)

async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        await update.message.reply_text("üì° –ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞—Ç‚Ä¶")
        count = await run_main()
        await update.message.reply_text(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω: –Ω–∞–π–¥–µ–Ω–æ {count} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.")
    except Exception as e:
        await notify_admin_of_error(f"–û—à–∏–±–∫–∞ –≤ /analyze: {e}", context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        regions = load_user_regions().get(str(user_id), [])
        regions_info = f"\nüìç –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: {', '.join(regions)}" if regions else ""

        base_cmds = (
            "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/unsubscribe ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
            "/regions ‚Äî –≤—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω—ã\n"
            "/my_alerts ‚Äî –≤—á–µ—Ä–∞—à–Ω–∏–µ —Ç–µ—Ä–º–æ—Ç–æ—á–∫–∏\n"
            "/about ‚Äî –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç\n"
            "/contacts ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–æ–º–∞–Ω–¥—ã\n"
            "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞"
        )
        if user_id in ADMIN_IDS:
            admin_cmds = "\n\nüîê –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n/analyze ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"
            await update.message.reply_text("‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n" + base_cmds + admin_cmds + regions_info)
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n" + base_cmds + regions_info)
    except Exception as e:
        await notify_admin_of_error(f"–û—à–∏–±–∫–∞ –≤ /help: {e}", context)
