# main.py

import argparse
import asyncio
from pathlib import Path
import json

from utils.logger import setup_logger
from tg.notifier import send_alert_messages
from core.geo_downloader import download_firms_data, load_local_archives
from core.geo_processor import load_polygons, find_matches_with_tolerance
from core.alert_generator import generate_alerts
from core.notifier import format_alert_message

def print_available_fields(df, label):
    print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ {label}:")
    for col in df.columns:
        print(f" - {col}")

def run_main(source="online"):
    setup_logger()

    if source == "local":
        fire_gdf = load_local_archives()
    else:
        fire_gdf = download_firms_data()

    poly_gdf = load_polygons()
    matched = find_matches_with_tolerance(fire_gdf, poly_gdf)
    if matched.empty:
        print("‚ùó –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    alerts = generate_alerts(matched)
    Path("data/last_alerts.json").write_text(json.dumps(alerts, ensure_ascii=False, indent=2))
    asyncio.run(send_alert_messages(alerts))

def debug_main(source="online"):
    setup_logger()

    if source == "local":
        print("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ä–º–æ—Ç–æ—á–µ–∫ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞...")
        fire_gdf = load_local_archives()
    else:
        print("üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ä–º–æ—Ç–æ—á–µ–∫ —Å FIRMS (–æ–Ω–ª–∞–π–Ω)...")
        fire_gdf = download_firms_data()

    print(f"üî• –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ—á–µ–∫: {len(fire_gdf)}")
    print("\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–∏–≥–æ–Ω–æ–≤...")
    poly_gdf = load_polygons()
    print(f"üó∫Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(poly_gdf)}")

    print("\nüìå –ü—Ä–∏–º–µ—Ä –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –ø–µ—Ä–≤–æ–π —Ç–µ—Ä–º–æ—Ç–æ—á–∫–∏:")
    print(fire_gdf.iloc[0].geometry)

    print("\nüìå –¶–µ–Ω—Ç—Ä–æ–∏–¥ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞:")
    print(poly_gdf.iloc[0].geometry.centroid)

    print("\nüîç –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å —É—á—ë—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏...")
    matched = find_matches_with_tolerance(fire_gdf, poly_gdf)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matched)}")

    if matched.empty:
        print("\n‚ùó –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    alerts = generate_alerts(matched)
    print(f"\nüö® –ù–∞–π–¥–µ–Ω–æ –ê–õ–ï–†–¢–æ–≤: {len(alerts)}")
    for alert in alerts[:5]:
        print("\nüì§ –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:")
        print(format_alert_message(alert))

    Path("data/last_alerts.json").write_text(json.dumps(alerts, ensure_ascii=False, indent=2))
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤.")
    asyncio.run(send_alert_messages(alerts))

def parse_args():
    parser = argparse.ArgumentParser(description="–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ä–º–æ—Ç–æ—á–µ–∫")
    parser.add_argument("--source", choices=["online", "local"], default="online", help="–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç–µ—Ä–º–æ—Ç–æ—á–µ–∫")
    parser.add_argument("--debug", action="store_true", help="–í—ã–≤–æ–¥–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()
    if args.debug:
        debug_main(source=args.source)
    else:
        run_main(source=args.source)
